apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

version = libraryVersion

/*
 * Comment the following part if you only want to distribute .aar files.
 * (For example, your source code is obfuscated by Proguard and is not shown to outside developers)
 * Without source code .jar files, you only can publish on bintray repository but not jcenter.
 */

if (project.hasProperty("android")) {
  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
  }
  task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  }
} else { // Java libraries
  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives javadocJar
  archives sourcesJar
}

// Create the pom configuration:
def pomConfig = {
  licenses {
    license {
      name licenseName
      url licenseUrl
      distribution "repo"
    }
  }
  developers {
    developer {
      id developerId
      name developerName
      email developerEmail
    }
  }

  scm {
    url "https://github.com/btrautmann/RxFirestore"
  }
}

publishing {
  publications {
    MyPublication(MavenPublication) {
      artifact sourcesJar
      artifact javadocJar
      artifact("$buildDir/outputs/aar/$aarName")
      groupId publishedGroupId
      artifactId artifact
      version libraryVersion
      pom.withXml {
        def root = asNode()
        root.appendNode('description', libraryDescription)
        root.appendNode('name', libraryName)
        root.appendNode('url', siteUrl)
        root.children().last() + pomConfig
        // Iterate over the implementation dependencies (we don't want the test ones)
        // adding a <dependency> node for each
        // TODO: Doing the below breaks the upload process with Invalid POM error
//        def dependenciesNode = asNode()
//        configurations.implementation.allDependencies.each {
//          // Ensure dependencies such as fileTree are not included.
//          if (it.name != 'unspecified') {
//            def dependencyNode = dependenciesNode.appendNode('dependency')
//            dependencyNode.appendNode('groupId', it.group)
//            dependencyNode.appendNode('artifactId', it.name)
//            dependencyNode.appendNode('version', it.version)
//          }
//        }
      }
    }
  }
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
  user = properties.getProperty("bintray.user")
  key = properties.getProperty("bintray.apikey")
  publications = ['MyPublication']
  pkg {
    repo = bintrayRepo
    name = bintrayName
    desc = libraryDescription
    userOrg = organization
    // If the repository is hosted by an organization instead of personal account.
    websiteUrl = siteUrl
    vcsUrl = gitUrl
    licenses = allLicenses
    publish = true
    publicDownloadNumbers = true
    version {
      name = libraryVersionName
      desc = libraryDescription
      released = new Date()
      vcsTag = libraryVersion
      gpg {
        sign = true
        passphrase = properties.getProperty("bintray.gpg.password")
      }
    }
  }
}